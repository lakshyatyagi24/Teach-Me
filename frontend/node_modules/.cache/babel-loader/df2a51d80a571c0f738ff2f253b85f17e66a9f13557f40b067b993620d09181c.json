{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oreld\\\\git\\\\Teach-Me\\\\frontend\\\\src\\\\screens\\\\ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScheduleScreen = () => {\n  _s();\n  var _scheduleData$dates, _scheduleData$times;\n  const [scheduleData, setScheduleData] = useState({\n    dates: [],\n    times: [],\n    bookings: {},\n    teacherName: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const {\n    courseId,\n    teacherId\n  } = useParams();\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      const userInfo = JSON.parse(localStorage.getItem('userInfo'));\n      if (userInfo) {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${userInfo.token}`\n          }\n        };\n        try {\n          setLoading(true);\n          const response = await axios.get(`/api/schedule/${courseId}/${teacherId}`, config);\n          //console.log('API Response:', response);\n\n          // Assuming each item in the response array has 'date', 'times', and 'bookings'\n          const scheduleList = response.data;\n\n          // Extract dates and times\n          const dates = scheduleList.map(item => item.date);\n          const times = scheduleList.reduce((acc, item) => {\n            acc.push(...item.times);\n            return acc;\n          }, []);\n\n          // Assuming bookings is an object with date keys and time values\n          const bookings = scheduleList.reduce((acc, item) => {\n            acc[item.date] = item.bookings;\n            return acc;\n          }, {});\n\n          // Use these extracted values to create the formattedData\n          const formattedData = {\n            dates,\n            times,\n            bookings,\n            // Add the teacher name extraction logic as needed\n            teacherName: ''\n          };\n          //console.log(\"formattedData\", formattedData);\n          setScheduleData(formattedData);\n          setLoading(false);\n        } catch (err) {\n          console.error('Fetching Schedule Error:', err);\n          setError(err.response && err.response.data && err.response.data.message ? err.response.data.message : err.message);\n          setLoading(false);\n        }\n      }\n    };\n    fetchSchedule();\n  }, [courseId, teacherId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"schedule-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Schedule for \", scheduleData.teacherName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        responsive: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"date-column\",\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), (_scheduleData$dates = scheduleData.dates) === null || _scheduleData$dates === void 0 ? void 0 : _scheduleData$dates.map((date, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: date\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: (_scheduleData$times = scheduleData.times) === null || _scheduleData$times === void 0 ? void 0 : _scheduleData$times.map((time, index) => {\n            var _scheduleData$dates2;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 37\n              }, this), (_scheduleData$dates2 = scheduleData.dates) === null || _scheduleData$dates2 === void 0 ? void 0 : _scheduleData$dates2.map((date, dateIndex) => {\n                const timesForDate = scheduleData.bookings[date];\n                const isBooked = Array.isArray(timesForDate) && timesForDate.includes(time);\n                const cellClass = isBooked ? 'booked' : 'available'; // Use the classes defined in the CSS\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cellClass // Apply the class here\n                  ,\n                  children: isBooked ? 'Booked' : 'Available'\n                }, `${date}-${time}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 45\n                }, this);\n              })]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(ScheduleScreen, \"oQF1UzAcPoBlIcV+DFPCbGEZx7U=\", false, function () {\n  return [useParams];\n});\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","ScheduleScreen","_s","_scheduleData$dates","_scheduleData$times","scheduleData","setScheduleData","dates","times","bookings","teacherName","loading","setLoading","error","setError","courseId","teacherId","fetchSchedule","userInfo","JSON","parse","localStorage","getItem","config","headers","Authorization","token","response","get","scheduleList","data","map","item","date","reduce","acc","push","formattedData","err","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","striped","bordered","hover","responsive","index","time","_scheduleData$dates2","dateIndex","timesForDate","isBooked","Array","isArray","includes","cellClass","_c","$RefreshReg$"],"sources":["C:/Users/oreld/git/Teach-Me/frontend/src/screens/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst ScheduleScreen = () => {\r\n    const [scheduleData, setScheduleData] = useState({\r\n        dates: [],\r\n        times: [],\r\n        bookings: {},\r\n        teacherName: ''\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const { courseId, teacherId } = useParams();\r\n\r\n    useEffect(() => {\r\n        const fetchSchedule = async () => {\r\n            const userInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n            if (userInfo) {\r\n                const config = {\r\n                    headers: {\r\n                        Authorization: `Bearer ${userInfo.token}`,\r\n                    },\r\n                };\r\n                try {\r\n                    setLoading(true);\r\n                    const response = await axios.get(`/api/schedule/${courseId}/${teacherId}`, config);\r\n                    //console.log('API Response:', response);\r\n                    \r\n                    // Assuming each item in the response array has 'date', 'times', and 'bookings'\r\n                    const scheduleList = response.data;\r\n    \r\n                    // Extract dates and times\r\n                    const dates = scheduleList.map(item => item.date);\r\n                    const times = scheduleList.reduce((acc, item) => {\r\n                        acc.push(...item.times);\r\n                        return acc;\r\n                    }, []);\r\n    \r\n                    // Assuming bookings is an object with date keys and time values\r\n                    const bookings = scheduleList.reduce((acc, item) => {\r\n                        acc[item.date] = item.bookings;\r\n                        return acc;\r\n                    }, {});\r\n    \r\n                    // Use these extracted values to create the formattedData\r\n                    const formattedData = {\r\n                        dates,\r\n                        times,\r\n                        bookings,\r\n                        // Add the teacher name extraction logic as needed\r\n                        teacherName: '',\r\n                    };\r\n                    //console.log(\"formattedData\", formattedData);\r\n                    setScheduleData(formattedData);\r\n                    setLoading(false);\r\n                } catch (err) {\r\n                    console.error('Fetching Schedule Error:', err);\r\n                    setError(err.response && err.response.data && err.response.data.message ? err.response.data.message : err.message);\r\n                    setLoading(false);\r\n                }\r\n            }\r\n        };\r\n    \r\n        fetchSchedule();\r\n    }, [courseId, teacherId]);\r\n    \r\n\r\n    return (\r\n        <div className=\"schedule-container\">\r\n            {loading ? (\r\n                <p>Loading...</p>\r\n            ) : error ? (\r\n                <p>Error: {error}</p>\r\n            ) : (\r\n                <>\r\n                    <h2>Schedule for {scheduleData.teacherName}</h2>\r\n                    <Table striped bordered hover responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"date-column\">Date</th>\r\n                            {scheduleData.dates?.map((date, index) => (\r\n                                <th key={index}>{date}</th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n                        <tbody>\r\n                            {scheduleData.times?.map((time, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{time}</td>\r\n                                    {scheduleData.dates?.map((date, dateIndex) => {\r\n                                        const timesForDate = scheduleData.bookings[date];\r\n                                        const isBooked = Array.isArray(timesForDate) && timesForDate.includes(time);\r\n                                        const cellClass = isBooked ? 'booked' : 'available'; // Use the classes defined in the CSS\r\n                                        return (\r\n                                            <td\r\n                                                key={`${date}-${time}`}\r\n                                                className={cellClass} // Apply the class here\r\n                                            >\r\n                                                {isBooked ? 'Booked' : 'Available'}\r\n                                            </td>\r\n                                        );\r\n                                    })}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}